import argparse
from tqdm import tqdm  # Import tqdm
from utils import llmchat, get_result
import time

header_prompt = """
Score the translation generated by the NMT model from english to Vietnam according to the following criteria:
Perfect sentence, score is 3
Able to understand subject/details of the output smoothly, but it has some minor errors, including additions and omissions, score is 2.5
Mostly able to guess and understand subject/details of the output correctly, score is 2
Partially able to guess and understand subject/details of the output, or it includes some wrong keyword/details, which may lead to misunderstanding, score is 1.5
Unable to understand subject/details of the output, score is 1

Output will be:
| Source sentence | Translated sentence | score |

Source sentence: I would love to buy my fiancé some nice jewelry, but it would definitely break the bank!
Translated sentence: Tôi rất muốn mua cho vị hôn phu của tôi một số đồ trang sức đẹp, nhưng như thế thì chắc chắn tôi sẽ hết tiền mất
Output: 
| I would love to buy my fiancé some nice jewelry, but it would definitely break the bank! | Tôi rất muốn mua cho vị hôn phu của tôi một số đồ trang sức đẹp, nhưng như thế thì chắc chắn tôi sẽ hết tiền mất | 3 |

Source sentence: Don’t you think we should quit while the going is good? 
Translated sentence: Bạn không nghĩ rằng chúng ta nên bỏ cuộc khi mọi chuyện tốt đẹp sao?
Output: |Don’t you think we should quit while the going is good? |Bạn không nghĩ rằng chúng ta nên bỏ cuộc khi mọi chuyện tốt đẹp sao?|1.5|
"""

def read_files(source_file, target_file):
    """Đọc nội dung từ hai file và trả về danh sách các cặp câu."""
    with open(source_file, 'r', encoding='utf-8') as f_en, open(target_file, 'r', encoding='utf-8') as f_vi:
        english_lines = f_en.readlines()
        vietnamese_lines = f_vi.readlines()

    # Kiểm tra xem hai file có cùng số dòng không
    if len(english_lines) != len(vietnamese_lines):
        raise ValueError("Hai file không có cùng số dòng!")

    return list(zip(english_lines, vietnamese_lines))

def create_batches(pairs, batch_size):
    """Chia danh sách các cặp câu thành các batch."""
    for i in range(0, len(pairs), batch_size):
        yield pairs[i : i + batch_size]

def generate_llm_question(source, target):
    source = source.replace("&apos;t", "'").replace("&quot;", '"')
    target = target.replace("&apos;t", "'").replace("&quot;", '"')
    return f"""
    Source sentence: {source}
    Translated sentence: {target}
    Output: 
    """

def append_to_file(file_path, text_to_append):
    try:
        # Open the file in append mode ('a')
        with open(file_path, "a") as file:
            # Append the text and a newline for formatting
            file.write(text_to_append + "\n") 
    except FileNotFoundError:
        print(f"Error: File not found at {file_path}")
    except Exception as e:
        print(f"An error occurred: {e}")


def main(source_file, target_file, batch_size):
    """Hàm chính để thực hiện các tác vụ."""
    pairs = read_files(source_file, target_file)
    batches = create_batches(pairs, batch_size)
    total_batches = len(pairs) // batch_size + (1 if len(pairs) % batch_size else 0)
    
    file_path = "translation_score.txt"
    
    for batch in tqdm(batches, total=total_batches, desc="Processing Batches"):
        body_prompt = [generate_llm_question(source, target) for source, target in batch]
        body_prompt_string = "".join(body_prompt)
        
        prompt = header_prompt + "" + body_prompt_string
        
        # print("=====prompt====")
        # print(prompt)
        
        response = llmchat([prompt])
        results = get_result(response)
        
        for result in results:
            source, target, score = result
            text_to_append = f"{source}\t{target}\t{score}"
            append_to_file(file_path, text_to_append)
        

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Evaluate translation model.")
    parser.add_argument("source_file", help="Đường dẫn tới file Source")
    parser.add_argument("target_file", help="Đường dẫn tới file Target")
    parser.add_argument("-b", "--batch_size", type=int, default=5, help="Kích thước batch (mặc định: 5)")
    args = parser.parse_args()
    start_time = time.time()  # Get start time in seconds
    main(args.source_file, args.target_file, args.batch_size)
    end_time = time.time()    # Get end time in seconds

    elapsed_time = end_time - start_time
    print(f"Time taken by my_function: {elapsed_time} seconds")
